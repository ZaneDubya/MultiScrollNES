Description of Actors in RAM (active) and in ROM.
Last updated 07/09/14

=============================[ Table of Contents ]==============================

1.      Actors In ROM
1.A.        Actor Type Definitions
1.B.        Actor Combat Data Definitions
1.C.        Actor Lists in Map Data
1.D.        Actor Scripts
2.      Actors In RAM
2.A.        Active Actor Array
2.B.        Active Actor Y-Sorting
3.      Actor Notes

==============================[ 1. Actors In ROM ]==============================
Actor definitions, placement in the world, and scripting are handled with the 
eightbit utility. An actor has scripts for interaction, drawing, combat, etc.

------------------------[ 1.A. Actor Type Definitions ]-------------------------
Object data definition, 8b each (32 per 256b)
    1b Sprite data
            7654 3210
            .... .sss
            s = speed (pixels per frame)
    1b Sprite Definition Index
    2b Pointer to animate script ($0000 = no script, not visible)
    2b Pointer to interaction script ($0000 = no script)
    2b Pointer to dynamic script header ($0000 = no script)
        Format for pointers is BBpppppp pppppppp
            B - bank offset (0-3) from global scripts bank.
            p - pointer inside specified bank.
                (points to to %10pppppp pppppppp, $8000 - $bfff)
                
    Initial flags on boot:
        V - Visible (has sprite) = 1
        B - Blocking = 1
        I - Interactable (shows 'A' button when near, has interact script) = 0
        D - is a dynamic actor (has main script, ticks) = 1 if ptr is not $0000
        M - is accelerating = 0
        C - aCtion - running action = 0
        P - 'Pause' - if dynamic, do not tick scripts on this actor = 0
        A - Active; has been instantiated. (if 0, empty actor slot) = 1
        
    
---------------------[ 1.B. Actor Combat Data Definitions ]---------------------
Not yet implemented.

------------------------[ 1.C. Actor Lists in Map Data ]------------------------

**** MapData.txt references this section.

If a SuperChunk has the 'A' flag in its bitflags, the following data structure
is included in the map data:

	1b Actor list length
    1b Actor count
    Each Actor is 4 bytes:
        1b location (yyyyxxxx, in tiles)
        2b actor type
        76543210 76543210
        tttttttt vvvvTTTT
            t: actor definition index, 0-255
            T: extended actor definition index, 256-4095
            v = variable bitflags (3210): these variables follow as bytes.
        1b flags
        76543210
        V.ccffP.
            
            f = initial facing (N = 0, E = 1, S = 2, W = 3)
            P = Pause flag.
            V = Visible flag.
            c = Palette (color).

        
-----------------------------[ 1.D. Actor Scripts ]-----------------------------
When an actor is 'ticked', it begins running its script. Actor scripts are
'cooperatively multitasked' - along with the rest of the engine - and thus each
Actor Script must (a) give up control when it is done running, and (b) must not
run for many cycles before it gives up control.

When the actor script begins running, the index of the actor running the script
will be in the 'x' register (for easy access to the actor variables). The actor
may use the variables $00 - $0B as scratch space. Writing any other RAM location
will doubtless cause unknown behavior and may cause the Engine to crash.

The script may call a number of subroutines in the Core bank that extend the
functionality of the actor script.

For thoughts on Actor scripting, refer to 'ActorScripting.txt'.

==============================[ 2. Actors In RAM ]==============================


--------------------------[ 2.A. Active Actor Array ]---------------------------
Actor data array in active memory (16 x 16b actors 'alive', 256b total)
* Actors can be 'static', which can be interactable but do not have
  update scripts and are not ticked, or Dynamics, which have update
  scripts and are ticked every frame.
* Each actor's data is interleaved with the others in 16b segments.
  The segments are as follows:
  
    $0x00   Actor_Bitflags
            7654 3210
            VBID MC.A
            V - Visible (has sprite)
            B - Blocking
            I - Interactable (shows 'A' button when near, has interact script)
            D - is a dynamic actor (has main script, ticks)
            M - is moving.
            C - aCtion - running action.
            A - Active; has been instantiated. (if 0, empty actor slot).
            
    $0x10   Actor_X - X pixel position in superchunk
    $0x20   Actor_Y - Y pixel position in superchunk
    $0x30   Actor_SuperChunk - Superchunk this actor is located within.
            Wraps at 15.
    $0x40   Actor_DrawData0
            7654 3210
            cccc ffpp
            p = palette (4-7)
            f = facing.
            c = chrram tile index for first tile.
    $0x50   Actor_DrawData1
            this depends on the actor. For 'combat' actors, it is:
            m..i iiii
            m = draw movement sprite, otherwise draw sprite with index i
    $0x60   UNUSED
    $0x70   Actor_Definition (0-255)
            Index into Actor Definitions.
    $0x80   Actor_ScriptPtr & Actor_ScriptPtrHi
            2-byte pointer to current executing script
    $0xA0   Actor_Var0 - Actor_Var5
            6 1b variables, used with the current executing script or action.


Dynamic action bitflag format: oooo AAAA in Actor_Var5.
A___   	Notes
$0      No action. Execute script.
$1      Wait. No execute until wait is complete.
        Sum of (offset + 1) is multiplied by 15, result is number of frames to
        wait. This command uses Var4 as a counter, and thus wipes the same out.
        o = $0 wait 15 frames (1/4 second)
            $1 wait 30 frames (1/2 second)
            $3 wait 60 frames (1 second)
            $f wait 240 frames (4 seconds)
$2      Moving, tile based. Offset includes direction and movement and speed.
        This command uses Var3 as a counter, and thus wipes the same out.
        Offset format is ddss, where d is the direction, and s is the speed.
        d: n = 00, e = 01, s = 10, w = 11
        s:  $3 = move 2 pixels per frame. Moving one tile takes 8 frames.
            $2 = move 1 pixel per frame. Moving one tile takes 16 frames.
            $1 = move 1 pixel every other frame. Moves one tile in 32 frames.
            $0 = move 1 pixel every fourth frame. Moves one tile in 64 frames.
$3      Animating, o is the animation script for the designated ActorType.


------------------------[ 2.B. Active Actor Y-Sorting ]-------------------------
Actor sort array (16 x 1b indexes, 16b total)
* The y-sort array is at $00D0 and contains 16 indexes.
* Actors are y-sorted every frame.

===============================[ 3. Actor Notes ]===============================
To clear an actor, you must both clear the actor's index in the sort array, AND
clear bit 0 of that actor's BitFlags.