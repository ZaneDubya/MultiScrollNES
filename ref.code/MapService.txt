MapService logic
* Updated 11/30/13

Load procedure:
	Map Header:
		Save bank, index, and chunk bank increment.
		Save tileset indexes.
	Load Tilesets for the focused SuperChunk:
		Each tileset:
			Load graphics into vram
			Load palette
			Load tile data into $06,$07
	Update camera:
		Determine initial location based on Focus variables.
		Move Camera to figure out which SuperChunks we'll be loading.
	Load the tile data from all superchunks.
		Each super chunk:
			Each chunk:
				Unpack chunk tiles to $6C-$6F (make them linear)
				About ~5000 cycles per superchunk.
			Load actors into memory.
				Set NeedsSort to true.
			
In engine:
	Run dynamic code.
	Every completed step, check super chunk eggs.
	Scroll based on focus: check for bounding tiles
		left, top, right, bottom
		

Scroll is based on tile in the bottom left of the screen:
	Load data so that this bottom left tile is in the bottom left super chunk.

To find current scroll coordinate:
	goal = focus coordinate minus one half screen.
	bound goal to extends.
	if goal != current, scroll x pixels where x = scroll accel value from table:
		32+: scroll 4p (check any in overflow, then AND E0)
		16-31: scroll 3p (AND 10)
		8-15: scroll 2p (AND 08)
		1-7: scroll 1p
	So: 32	28	25	22	19	16	13	11	9	7	6	5	4	3	2	1	0
	17 frames, about 1/3 of a second to scroll 32 pixels. \
		Might need to adjust table 
		
On Load:
	Screen off
	Load four superchunks. Load graphics. Load nametables.
	Screen on
On Scroll at border of loaded area:
	Left, Right:
		Vblank - load 1 full tile column
			(30b 1st column subtiles, 30b 2nd column subtiles, 8b attributes)
	Top, Bottom:
		Vblank1 - load 1 full tile row 
			(32b 1st column subtiles, 30b 2nd column subtiles, 8b attributes)
		Vblank2 - if needed - as left, right, load full tile column.
			
